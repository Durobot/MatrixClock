#include "stdint.h"
#include <PxMatrix.h>

#include "GlyphRenderer.h"

extern PxMATRIX display; // In MatrixClock.ino

// 16x24 numeric characters, 1 bit per pixel,
// so 2 bytes is 1 row
static const uint16_t big_digits[][BIG_DIGIT_HEIGHT] =
{
  // 0
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 1
  {
    0x07C0, 0x07C0,
    0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0,
    0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0,
    0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0,
    0x01C0, 0x01C0, 0x01C0,
    0x0000
  },
  // 2
  {
    0x1FF8, 0x3FFC, 0x700E, 0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x000E,
    0x001C, 0x0038, 0x0070, 0x00E0,
    0x01C0, 0x0380,
    0x0700, 0x0E00, 0x1C00, 0x3800,
    0x7FFE, 0x7FFE,
    0x0000
  },
  // 3
  {
    0x1FF8, 0x3FFC,
    0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x001E, 0x03FC, 0x03FC, 0x001E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 4
  {
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E, 0x700E, 0x700E,
    0x3FFE, 0x1FFE,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x000E, 0x000E, 0x000E,
    0x0000
  },
  // 5
  {
    0x7FFE, 0x7FFE,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x7FF8, 0x7FFC, 0x001E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x000E,
    0x701E, 0x3FFC, 0x1FF8,
    0x0000
  },
  // 6
  {
    0x1FF8, 0x3FFC, 0x700E,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x7FF8, 0x7FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E, 0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 7
  {
    0x3FFC, 0x7FFE, 0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x001C, 0x001C, 0x001C,
    0x0038, 0x0038, 0x0038,
    0x0070, 0x0070, 0x0070,
    0x00E0, 0x00E0, 0x00E0,
    0x01C0, 0x01C0, 0x01C0,
    0x0000
  },
  // 8
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x781E,
    0x3FFC, 0x3FFC,
    0x781E,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 9
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E,
    0x3FFE, 0x1FFE,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x700E, 0x3FFC, 0x1FF8,
    0x0000
  }
};

// Transitions between 16x24 digits, 2 frames per transition
static const uint16_t big_dig_trans[][BIG_DIGIT_HEIGHT] =
{
  // 0 - 1, #1
  {
    0x07F0, 0x0FF8,
    0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C,
    0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C, 0x1C1C,
    0x0FF8, 0x07F0,
    0x0000
  },
  // 0 - 1, #2
  {
    0x07C0, 0x07E0,
    0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360,
    0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360, 0x0360,
    0x03E0, 0x01C0,
    0x0000
  },
  // 1 - 2, #1
  {
    0x07C0, 0x0FE0,
    0x0C60, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
    0x00C0, 0x00C0,
    0x0180, 0x0180,
    0x0300, 0x0300,
    0x0600, 0x0600,
    0x0C00, 0x0C00,
    0x0FE0, 0x0FE0,
    0x0000
  },
  // 1 - 2, #2
  {
    0x0FF0, 0x1FF8,
    0x1818,
    0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    0x0030, 0x0060, 0x00C0, 0x0180, 0x0180, 0x0300, 0x0600, 0x0C00,
    0x1800, 0x1800,
    0x1FFC, 0x1FFC,
    0x0000
  },
  // 2 - 3, #1
  {
    0x1FF8, 0x3FFC, 0x700E, 0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x001E, 0x003C, 0x003C, 0x001E, 0x000E,
    0x0002, 0x0100, 0x0380, 0x0700, 0x0E00, 0x1C00, 0x3800,
    0x78FC, 0x78F8,
    0x0000
  },
  // 2 - 3, #2
  {
    0x1FF8, 0x3FFC, 0x700E, 0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x001E, 0x00FC, 0x00FC, 0x001E,
    0x000E, 0x000E, 0x000E,
    0x0000, 0x0000,
    0x080E, 0x1C0E, 0x380E,
    0x78FC, 0x78F8,
    0x0000
  },
  // 3 - 4, #1
  {
    0x1E78, 0x3E7C,
    0x700E, 0x700E, 0x700E, 0x700E,
    0x400E, 0x000E, 0x000E, 0x000E,
    0x001C, 0x03FC, 0x03FE,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x0FFC, 0x0FF8,
    0x0000
  },
  // 3 - 4, #2
  {
    0x1818, 0x381C,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x400E, 0x000E,
    0x07FE, 0x07FE,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x00FC, 0x00F8,
    0x0000
  },
  // 4 - 5, #1
  {
    0x703E, 0x703E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x7000, 0x7000, 0x7000,
    0x7FFC, 0x3FFE,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x007E, 0x007C,
    0x0000
  },
  // 4 - 5, #2
  {
    0x73FE, 0x73FE,
    0x700E, 0x700E,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x7FF8, 0x7FFC, 0x001E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x0FFE, 0x0FFC,
    0x0000
  },
  // 5 - 6, #1
  {
    0x3FFC, 0x7FFE,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x7FF8, 0x7FFC, 0x701E,
    0x700E, 0x700E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x701E, 0x3FFC, 0x1FF8,
    0x0000
  },
  // 5 - 6, #2
  {
    0x1FF8, 0x3FFC,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x7FF8, 0x7FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x000E, 0x000E, 0x000E,
    0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 6 - 7, #1
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x701C, 0x7F1C, 0x7E00,
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000,
    0x4000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  // 6 - 7, #2
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x600E,
    0x001C, 0x001C, 0x001C,
    0x0038, 0x0038, 0x0038,
    0x0070, 0x0070, 0x0070,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  // 7 - 8, #1
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x600E,
    0x000E, 0x001E, 0x003C, 0x003C, 0x001E, 0x001E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x001C, 0x0038,
    0x0000
  },
  // 7 - 8, #2
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x781E, 0x3FFC, 0x3FFC, 0x781E,
    0x700E, 0x700E, 0x700E,
    0x400E,
    0x000E, 0x000E, 0x000E, 0x000E,
    0x0FFC, 0x1FF8,
    0x0000
  },
  // 8 - 9, #1
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x781E,
    0x3FFC, 0x3FFC,
    0x781E,
    0x700E, 0x700E,
    //
    0x600E, 0x000E, 0x100E,
    //
    0x700E, 0x700E, 0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 8 - 9, #2
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x3FFE, 0x7FFE,
    0x700E,
    0x100E,
    0x000E, 0x000E, 0x000E, 0x000E,
    0x600E, 0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 9 - 0, #1
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E,
    0x7E7E, 0x7E7E,
    0x600E,
    0x000E, 0x000E, 0x000E, 0x000E, 0x000E,
    0x300E, 0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  },
  // 9 - 0, #2
  {
    0x1FF8, 0x3FFC,
    0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E, 0x700E,
    0x700E, 0x700E,
    0x7C3E, 0x7C3E,
    0x700E, 0x700E,
    0x400E,
    0x000E, 0x000E,
    0x300E,
    0x700E, 0x700E,
    0x3FFC, 0x1FF8,
    0x0000
  }
};

// 6x8 alphanumeric, punctuation and symbol characters (some), 1 bit per pixel,
// 1 byte is 1 row. Since there are 6 pixels in a row 2 most significant
// bits are always 0. In practice, all characters have leftmost column empty,
// 3 most significant bits are always 0.
static const uint8_t small_chars[][SMALL_CHAR_HEIGHT] =
{
  { 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00 }, // !
  { 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00 }, // "
  { 0x02, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x08, 0x00 }, // #
  { 0x04, 0x0E, 0x10, 0x0E, 0x01, 0x0E, 0x04, 0x00 }, // $
  { 0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00 }, // %
  { 0x08, 0x14, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00 }, // &
  { 0x0C, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '
  { 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00 }, // (
  { 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00 }, // )
  { 0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00 }, // *
  { 0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00 }, // +
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x04 }, // ,
  { 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00 }, // -
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00 }, // .
  { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00 }, // /
  { 0x0E, 0x11, 0x11, 0x15, 0x11, 0x11, 0x0E, 0x00 }, // 0
  { 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00 }, // 1
  { 0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00 }, // 2
  { 0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E, 0x00 }, // 3
  { 0x11, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x00 }, // 4
  { 0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00 }, // 5
  { 0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00 }, // 6
  { 0x1F, 0x11, 0x01, 0x02, 0x02, 0x04, 0x04, 0x00 }, // 7
  { 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00 }, // 8
  { 0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00 }, // 9
  { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00 }, // :
  { 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00 }, // ;
  { 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00 }, // <
  { 0x00, 0x00, 0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00 }, // =
  { 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00 }, // >
  { 0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00 }, // ?
  { 0x0E, 0x11, 0x13, 0x15, 0x17, 0x10, 0x0E, 0x00 }, // @
  { 0x0E, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00 }, // A
  { 0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E, 0x00 }, // B
  { 0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00 }, // C
  { 0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00 }, // D
  { 0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F, 0x00 }, // E
  { 0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00 }, // F
  { 0x0E, 0x11, 0x10, 0x17, 0x11, 0x11, 0x0E, 0x00 }, // G
  { 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00 }, // H
  { 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00 }, // I
  { 0x0E, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C, 0x00 }, // J
  { 0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00 }, // K
  { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00 }, // L
  { 0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00 }, // M
  { 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00 }, // N
  { 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 }, // O
  { 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x00 }, // P
  { 0x0E, 0x11, 0x11, 0x11, 0x15, 0x13, 0x0E, 0x00 }, // Q
  { 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x00 }, // R
  { 0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00 }, // S
  { 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00 }, // T
  { 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 }, // U
  { 0x11, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x00 }, // V
  { 0x11, 0x11, 0x11, 0x11, 0x15, 0x1B, 0x11, 0x00 }, // W
  { 0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00 }, // X
  { 0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00 }, // Y
  { 0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00 }, // Z
  { 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00 }, // [
  { 0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00 }, // \ - don't leave backslash as the last character of a C line
  { 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x00 }, // ]
  { 0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ^
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00 }, // _
  { 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, // `
  { 0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00 }, // a
  { 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00 }, // b
  { 0x00, 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x00 }, // c
  { 0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00 }, // d
  { 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00 }, // e
  { 0x06, 0x0A, 0x08, 0x08, 0x1C, 0x08, 0x08, 0x00 }, // f
  { 0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x01, 0x0E }, // g
  { 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00 }, // h
  { 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00 }, // i
  { 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x08, 0x00 }, // j
  { 0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12, 0x00 }, // k
  { 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00 }, // l
  { 0x00, 0x00, 0x1A, 0x15, 0x15, 0x11, 0x11, 0x00 }, // m
  { 0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00 }, // n
  { 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00 }, // o
  { 0x00, 0x00, 0x16, 0x19, 0x11, 0x1E, 0x10, 0x10 }, // p
  { 0x00, 0x00, 0x0D, 0x13, 0x11, 0x0F, 0x01, 0x01 }, // q
  { 0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00 }, // r
  { 0x00, 0x00, 0x0E, 0x10, 0x0E, 0x01, 0x0E, 0x00 }, // s
  { 0x08, 0x08, 0x1C, 0x08, 0x08, 0x08, 0x06, 0x00 }, // t
  { 0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D, 0x00 }, // u
  { 0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00 }, // v
  { 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00 }, // w
  { 0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00 }, // x
  { 0x00, 0x00, 0x11, 0x11, 0x0F, 0x01, 0x0E, 0x00 }, // y
  { 0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00 }  // z
};

// Transitions between 6x8 digits, 2 frames per transition
static const uint8_t small_dig_trans[][SMALL_CHAR_HEIGHT] =
{
  { 0x04, 0x0A, 0x0A, 0x0E, 0x0A, 0x0A, 0x04, 0x00 }, // 0 - 1, frame #1
  { 0x0C, 0x0C, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x00 }, // 0 - 1, frame #2
  { 0x04, 0x0A, 0x02, 0x04, 0x04, 0x04, 0x0E, 0x00 }, // 1 - 2, frame #1
  { 0x0C, 0x12, 0x02, 0x04, 0x08, 0x08, 0x1E, 0x00 }, // 1 - 2, frame #2
  { 0x0E, 0x11, 0x01, 0x02, 0x04, 0x04, 0x0E, 0x00 }, // 2 - 3, frame #1
  { 0x0E, 0x11, 0x01, 0x06, 0x02, 0x12, 0x0C, 0x00 }, // 2 - 3, frame #2
  { 0x06, 0x01, 0x01, 0x06, 0x01, 0x01, 0x06, 0x00 }, // 3 - 4, frame #1
  { 0x02, 0x01, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x00 }, // 3 - 4, frame #2
  { 0x11, 0x11, 0x1F, 0x01, 0x01, 0x01, 0x06, 0x00 }, // 4 - 5, frame #1
  { 0x1C, 0x10, 0x1E, 0x01, 0x01, 0x01, 0x0E, 0x00 }, // 4 - 5, frame #2
  { 0x0F, 0x10, 0x1E, 0x01, 0x11, 0x11, 0x0E, 0x00 }, // 5 - 6, frame #1
  { 0x06, 0x08, 0x10, 0x1E, 0x01, 0x11, 0x0E, 0x00 }, // 5 - 6, frame #2
  { 0x06, 0x09, 0x04, 0x04, 0x0E, 0x0A, 0x04, 0x00 }, // 6 - 7, frame #1
  { 0x0E, 0x11, 0x01, 0x02, 0x06, 0x0C, 0x04, 0x00 }, // 6 - 7, frame #2
  { 0x1F, 0x11, 0x01, 0x06, 0x02, 0x01, 0x01, 0x00 }, // 7 - 8, frame #1
  { 0x1F, 0x11, 0x11, 0x06, 0x01, 0x11, 0x0E, 0x00 }, // 7 - 8, frame #2
  { 0x0E, 0x11, 0x11, 0x0F, 0x01, 0x11, 0x0E, 0x00 }, // 8 - 9, frame #1
  { 0x0E, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x0E, 0x00 }, // 8 - 9, frame #2
  { 0x0E, 0x11, 0x11, 0x0F, 0x01, 0x12, 0x0C, 0x00 }, // 9 - 0, frame #1
  { 0x0E, 0x11, 0x11, 0x1F, 0x11, 0x12, 0x0C, 0x00 }, // 9 - 0, frame #2
  { 0x1F, 0x11, 0x14, 0x11, 0x01, 0x11, 0x0E, 0x00 }, // 5 - 9, frame #1
  { 0x1F, 0x11, 0x15, 0x15, 0x11, 0x11, 0x0E, 0x00 }  // 5 - 9, frame #2
};

GlyphRenderer::GlyphRenderer()
{}

GlyphRenderer::~GlyphRenderer()
{}

void GlyphRenderer::drawBigDigit(uint8_t digit, int16_t x, int16_t y, struct RGB888 clr)
{
    const uint16_t* digit_word = &big_digits[digit][0];

    struct RGB888 cur_clr = clr;
    struct RGB888 d_clr =
    {
      .r = clr.r / ((BIG_DIGIT_HEIGHT >> 1) + 1),
      .g = clr.g / ((BIG_DIGIT_HEIGHT >> 1) + 1),
      .b = clr.b / ((BIG_DIGIT_HEIGHT >> 1) + 1)
    };

    int16_t x_limit = x + BIG_DIGIT_WIDTH;
    int16_t y_limit = y + BIG_DIGIT_HEIGHT - 1; // the 24th is empty, so we may skip it
    for(uint8_t i = 0; y < y_limit; y++, i++) // Glyph lines
    {
        uint16_t word = *digit_word++;
        for(int16_t scr_x = x; scr_x < x_limit; scr_x++)
        {
            if((word & 0x8000) == 0)
                display.drawPixelRGB888(scr_x, y, 0, 0, 0);
            else
                display.drawPixelRGB888(scr_x, y, cur_clr.r, cur_clr.g, cur_clr.b);

            word <<= 1;
        }
        if(i == 11)
          cur_clr = clr;
        else
        {
          cur_clr.r -= d_clr.r;
          cur_clr.g -= d_clr.g;
          cur_clr.b -= d_clr.b;
        }
    }
}

void GlyphRenderer::drawBigDigitTrans(uint8_t digit, uint8_t frame_idx, int16_t x, int16_t y, struct RGB888 clr)
{
    // Skip digit & transition index validity checks
    const uint16_t* digit_word = &big_dig_trans[(digit << 1) + frame_idx][0];

    int16_t x_limit = x + BIG_DIGIT_WIDTH;
    int16_t y_limit = y + BIG_DIGIT_HEIGHT - 1; // the 24th is empty, so we may skip it
    for(; y < y_limit; y++) // Digit glyph lines, the 24th is empty, so we may skip it
    {
        uint16_t word = *digit_word++;
        for(int16_t scr_x = x; scr_x < x_limit; scr_x++)
        {
            if((word & 0x8000) == 0)
                display.drawPixelRGB888(scr_x, y, 0, 0, 0);
            else
                display.drawPixelRGB888(scr_x, y, clr.r, clr.g, clr.b);

            word <<= 1;
        }
    }
}

void GlyphRenderer::drawSmallChar(char c, uint16_t x, uint16_t y, struct RGB888 clr)
{
    // Skip character validity check
    const uint8_t* char_byte = &small_chars[c - '!'][0];

    uint16_t x_limit = x + SMALL_CHAR_WIDTH;
    uint16_t y_limit = y + SMALL_CHAR_HEIGHT;
    for(; y < y_limit; y++) // Digit glyph lines
    {
        uint8_t byt = *char_byte++;
        for(uint16_t scr_x = x; scr_x < x_limit; scr_x++)
        {
            if((byt & 0x20) == 0)
                display.drawPixelRGB888(scr_x, y, 0, 0, 0);
            else
                display.drawPixelRGB888(scr_x, y, clr.r, clr.g, clr.b);

            byt <<= 1;
        }
    }
}

void GlyphRenderer::drawSmallDigitTrans(uint8_t digit, uint8_t trans_idx, uint8_t frame_idx, uint16_t x, uint16_t y, struct RGB888 clr)
{
    // Skip digit & transition index validity checks
    const uint8_t* char_byte = \
      &small_dig_trans[(digit == 5 & trans_idx == 1) ? (9 * 2 + 2 + frame_idx) : (digit << 1) + frame_idx][0];

    uint16_t x_limit = x + SMALL_CHAR_WIDTH;
    uint16_t y_limit = y + SMALL_CHAR_HEIGHT - 1; // the 8th is empty, so we may skip it
    for(; y < y_limit; y++) // Digit glyph lines
    {
        uint8_t byt = *char_byte++;
        for(uint16_t scr_x = x; scr_x < x_limit; scr_x++)
        {
            if((byt & 0x20) == 0)
                display.drawPixelRGB888(scr_x, y, 0, 0, 0);
            else
                display.drawPixelRGB888(scr_x, y, clr.r, clr.g, clr.b);

            byt <<= 1;
        }
    }
}

void GlyphRenderer::drawSmallString(const char* str, uint16_t x, uint16_t y, struct RGB888 clr)
{
  for(; *str != NULL; str++)
    if(*str == ' ')
    {
      display.drawRect(x, y, SMALL_CHAR_WIDTH - 2, SMALL_CHAR_HEIGHT, 0);
      x += (SMALL_CHAR_WIDTH - 2);
    }
    else
    {
      GlyphRenderer::drawSmallChar(*str, x, y, clr);
      x += SMALL_CHAR_WIDTH;
    }
}
